
//*************************************************************************************************
// Константы модуля MODBUS
//*************************************************************************************************

#ifndef __MODBUS_DEF_H
#define __MODBUS_DEF_H

#define MB_ANSWER_DEV           0           //индекс ID уст-ва ответа
#define MB_ANSWER_FUNC          1           //индекс кода функции ответа
#define MB_ANSWER_CNT           2           //индекс кол-ва байт данных
#define MB_ANSWER_DATA          3           //индекс начало данных
#define MB_ANSWER_HEAD          3           //размер заголовка ответа на запрос

#define MB_REQUEST_DEV          0           //индекс ID уст-ва
#define MB_REQUEST_FUNC         1           //индекс кода функции
#define MB_REQUEST_DATA1        4           //индекс начала данных для FUNC_WR_SING_COIL и FUNC_WR_SING_REG
#define MB_REQUEST_DATAN        7           //индекс начала данных для FUNC_WR_MULT_COIL и FUNC_WR_MULT_REG

//*************************************************************************************************
// Функции протокола Modbus
//*************************************************************************************************
// Чтение данных. Запрос состоит из адреса первого элемента таблицы, значение которого требуется прочитать, 
// и количества считываемых элементов. Адрес и количество данных задаются 16-битными числами, 
// старший байт каждого из них передается первым.
#define FUNC_RD_COIL_STAT       0x01        //(битовая адресация) чтение значений из нескольких регистров флагов (Read Coil Status)
#define FUNC_RD_DISC_INP        0x02        //(битовая адресация) чтение значений из нескольких дискретных входов (Read Discrete Inputs)
#define FUNC_RD_HOLD_REG        0x03        //(16-битная адресация) чтение значений из нескольких регистров хранения (Read Holding Registers)
#define FUNC_RD_INP_REG         0x04        //(16-битная адресация) чтение значений из нескольких регистров ввода (Read Input Registers)

// Запись одного значения. Команда состоит из адреса элемента (2 байта) и устанавливаемого значения (2 байта).
// Для регистра хранения значение является просто 16-битным словом. Для флагов значение 0xFF00 означает
// включённое состояние, 0x0000 — выключенное, другие значения недопустимы. Если команда выполнена успешно,
// ведомое устройство возвращает копию запроса.
#define FUNC_WR_SING_COIL       0x05        //(битовая адресация) запись значения одного флага (Force Single Coil)
#define FUNC_WR_SING_REG        0x06        //(16-битная адресация) запись значения в один регистр хранения (Preset Single Register)

// Запись нескольких значений. Команда состоит из адреса элемента, количества изменяемых элементов,
// количества передаваемых байт устанавливаемых значений и самих устанавливаемых значений.
// Данные упаковываются так же, как в командах чтения данных. Ответ состоит из начального 
// адреса и количества изменённых элементов.
#define FUNC_WR_MULT_COIL       0x0F        //(битовая адресация) запись значений в несколько регистров флагов (Force Multiple Coils)
#define FUNC_WR_MULT_REG        0x10        //(16-битная адресация) запись значений в несколько регистров хранения (Preset Multiple Registers)

// Изменение регистров. Команда состоит из адреса регистра и двух 16-битных чисел, которые используются
// как маски, с помощью которых можно индивидуально сбросить или установить отдельные биты в регистре.
// Конечный результат определяется формулой: Результат = (Текущее_значение AND Маска_И) OR (Маска_ИЛИ AND (NOT Маска_И))
#define FUNC_WR_MASK_REG        0x16        //запись в один регистр хранения с использованием маски "И" и маски "ИЛИ" (Mask Write Register)

// Очереди данных. Функция предназначена для получения 16-битных слов из очереди, организованной
// по принципу «первым пришёл — первым ушёл» (FIFO).
#define FUNC_RD_FIFO_QUE        0x18        //Чтение данных из очереди (Read FIFO Queue)

// Доступ к файлам. Эти функции используются для доступа к 16-битным регистрам, организованным в файлы,
// состоящие из записей произвольной длины. В команде указывается номер файла, номер записи и длина
// записи в 16-битных словах. С помощью одной команды можно записать или прочитать несколько записей,
// не обязательно соседних. Кроме того, команда содержит однобайтовый код для указания типа ссылки на данные.
// В действующей версии стандарта определен только один тип (описанный выше) с кодом 0x06.
#define FUNC_RD_FILE_REC        0x14        //Чтение из файла (Read File Record)
#define FUNC_WR_FILE_REC        0x15        //Запись в файл (Write File Record)

// Фунции диагностики. Функция предназначена для получения информации об индикаторах состояния на удалённом устройстве.
// Функция предназначена для получения информации об индикаторах состояния на удалённом устройстве.
// Функция возвращает один байт, каждый бит которого соответствует состоянию одного индикатора.
#define FUNC_RD_EXCP_STAT       0x07        //Чтение сигналов состояния 8-битный (Read Exception Status)
// Эти функции предназначены для проверки функционирования последовательной линий связи.
#define FUNC_RD_DIAGNOSTIC      0x08        //Диагностика 16-битные (Diagnostic) 
#define FUNC_RD_EVENT_CNT       0x0B        //Чтение счетчика событий 16-битные (Get Com Event Counter) 
#define FUNC_RD_EVENT_LOG       0x0C        //Чтение журнала событий 16-битные (Get Com Event Log) 
// Функция предназначена для получения информации о типе устройства и его состоянии. Формат ответа зависит от устройства.
#define FUNC_RD_SLAVE_ID        0x11        //Чтение информации об устройстве 8-битные (Report Slave ID)

// Другие. Функция предназначена для передачи данных в произвольных форматах (определённых другими
// стандартами) от ведущего (master) к ведомому (slave) и обратно. Тип передаваемых данных определяется
// дополнительным кодом (MEI — MODBUS Encapsulated Interface), передаваемым после номера функции.
// Стандарт определяет MEI 13 (0x0D), предназначенный для инкапсуляции протокола CANopen.
// MEI 14 (0x0E) используется для получения информации об устройстве и MEI в диапазонах 0—12 и 15—255 зарезервированы.
#define FUNC_SEND_ENCP_INTF     0x2B        //Encapsulated Interface Transport

#define FUNC_ANSWER_ERROR       0x80        //Маска наличия ошибки

#endif


